General feedback:
------------------------
This is a good delivery that fulfills the requirements for exercise 6.1 to 6.3. The code is well documented with a good Pythonic structure. Excellent usage of `pandas` and  `matplotlib` as data analysis packages.

On a more technical note, your code has some serious issues, especially with the error handling and the concurrency problem. Here are the changes that I have made:
(1) Added the requirements.txt
(2) Fixed the concurrency issues.
(3) Added a lot of if-else checks to be used for error handling.
(4) Added the functionality that "remembers" the previous inputs.

Concurrency issues:
---------------------------
Your implementation of the web_visualization script fails to handle the concurrency issue when one or several people try to access and request the plots at the same time. The reason for why this happens has been mentioned in this thread on piazza https://piazza.com/class/iqniilaixj375h?cid=450. Of course this is not the requirement of the assignment, but I personally think that the whole point of building a web-server is to let multiple people access it at the same time.

One way to fix this concurrency issue is to avoid sending both the POST and the GET requests when processing the inputs from one particular client. This can be done by sending the plot image directly to the HTML as a byte sequence. To achieve this, I think it is best to use the `BytesIO` object from the `io` module, as well as the `base64` module (which will be used to decode/encode the bytes sequence). This allows us to send the plot image in one go through one single POST request, and hence fixes the concurrency problem. See the following link for more information on how this works: https://www.pythonanywhere.com/forums/topic/5017/

Since we are sending the plot image directly to the HTML template as a byte sequence, so there is no need to save the image in the `static` folder on the local drive. This also means that the caching issue will never occur (as we are not asking the browser to get any actual image file). This is the reason why I deleted the static folder, as well as the method `add_header(response)` in the web_visualization script.

User interface and error handling:
-------------------------------------------
As you have mentioned in your README file, your scripts lack all kinds of error handling. This is not one of the requirements for the assignment 6, so it is completely alright.

I have made some changes to both the HTML template as well the web_visualization script such that the server can handle input errors. For the template, I changed all the input type to `number`, and added the `min` and `max` values. This will tell the browser to force the user to enter valid inputs, which is very convenient because we don't have to implement the error handling ourselves. I have also added a few if-else checks in the HTML template to make sure that if a user leaves an input field blank, the default value will be passed to the server.

It would also be much more user-friendly if you let the HTML template show the previous inputs from the user. This can easily be done by simply passing some keyword arguments into the `render_template()` function (these arguments will represent the "current state" of the plots). See the changes I've made in both the web_visualization and the HTML template for more details.
